Checks: >
  -*,
  bugprone-*,
  -bugprone-easily-swappable-parameters,
  -bugprone-branch-clone,
  cppcoreguidelines-avoid-goto,
  cppcoreguidelines-init-variables,
  cppcoreguidelines-no-malloc,
  cppcoreguidelines-prefer-member-initializer,
  cppcoreguidelines-virtual-class-destructor,
  misc-const-correctness,
  misc-header-include-cycle,
  misc-include-cleaner,
  misc-misleading-identifier,
  misc-misplaced-const,
  misc-new-delete-overloads,
  misc-non-copyable-objects,
  misc-redundant-expression,
  misc-static-assert,
  misc-throw-by-value-catch-by-reference,
  misc-unconventional-assign-operator,
  misc-uniqueptr-reset-release,
  misc-unused-*,
  modernize-avoid-*,
  -modernize-avoid-bind,
  modernize-concat-nested-namespaces,
  modernize-deprecated-*,
  modernize-loop-convert,
  modernize-make-*,
  modernize-min-max-use-initializer-list,
  modernize-raw-string-literal,
  modernize-redundant-void-arg,
  modernize-replace-*,
  modernize-unary-static-assert,
  modernize-use-bool-literals,
  modernize-use-emplace,
  modernize-use-equals-*,
  modernize-use-noexcept,
  modernize-use-nullptr,
  modernize-use-override,
  modernize-use-starts-ends-with,
  modernize-use-using,
  boost-use-to-string,
  performance-faster-string-find,
  performance-for-range-copy,
  performance-implicit-conversion-in-loop,
  performance-inefficient-*,
  -performance-inefficient-string-concatenation,
  performance-move-const-arg,
  performance-no-automatic-move,
  performance-noexcept-destructor,
  performance-noexcept-swap,
  performance-trivially-destructible,
  performance-type-promotion-in-math-fn,
  performance-unnecessary-*,
  readability-avoid-*,
  readability-const-return-type,
  readability-container-*,
  readability-static-accessed-through-instance,
  readability-delete-null-pointer,
  readability-duplicate-include,
  readability-identifier-naming,
  readability-implicit-bool-conversion,
  readability-inconsistent-declaration-parameter-name,
  readability-make-member-function-const,
  readability-math-missing-parentheses,
  readability-misleading-indentation,
  readability-misplaced-array-index,
  readability-named-parameter,
  readability-non-const-parameter,
  readability-operators-representation,
  readability-qualified-auto,
  readability-redundant-*,
  readability-reference-to-constructed-temporary,
  readability-simplify-subscript-expr,
  readability-string-compare,
  readability-use-std-min-max
HeaderFilterRegex: 'ontologenius/include/ontologenius/*'
CheckOptions:
  - { key: readability-identifier-naming.NamespaceCase,         value: lower_case }
  - { key: readability-identifier-naming.ClassCase,             value: CamelCase }
  - { key: readability-identifier-naming.StructCase,            value: CamelCase }
  - { key: readability-identifier-naming.StructSuffix,          value: _t }
  - { key: readability-identifier-naming.FunctionCase,          value: camelBack }
  - { key: readability-identifier-naming.VariableCase,          value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberCase,     value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberSuffix,   value: _ }
  - { key: readability-identifier-naming.EnumCase,              value: CamelCase }
  - { key: readability-identifier-naming.EnumSuffix,            value: _e }
  - { key: readability-identifier-naming.EnumConstantCase,      value: lower_case }
  - { key: readability-identifier-naming.GlobalConstantCase,    value: UPPER_CASE }
  - { key: readability-identifier-naming.StaticConstantCase,    value: UPPER_CASE }
  - { key: readability-identifier-naming.StaticVariableCase,    value: lower_case }
  - { key: readability-identifier-naming.StaticVariableSuffix,  value: _ }
  - { key: readability-operators-representation.BinaryOperators, value: '&&;&=;&;|;~;!;!=;||;|=;^;^=' }
  - { key: misc-const-correctness.AnalyzeValues,                value: false }
  - { key: misc-include-cleaner.DeduplicateFindings,            value: false }
ExtraArgsBefore:
  - '-frelaxed-template-template-args'